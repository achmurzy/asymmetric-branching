{
library(hash)
dist <- hash(seq(1, nrow(tree)), rep(Inf, nrow(tree)))
current = start
dist[as.integer(start)] = 0
new_op <- paste(tree[start,]$CHILD_IDS, tree[start,]$PARENT_ID, sep="_")
new_op <- unlist(strsplit(new_op, split="_"))
new_op <- trimws(new_op[which(new_op != "" & new_op != "0")])
options <- as.integer(new_op)
while(!match(end, options, FALSE))
{
.set(h, new_op, dist$current+tree[options,]$LENGTH)
current <- as.integer(names(which.min(values(dist[as.character(options)]))))
new_op <- paste(tree[current,]$CHILD_IDS, tree[current,]$PARENT_ID, sep="_")
new_op <- trimws(unlist(strsplit(new_op, split="_")))
new_op <- new_op[which(new_op != "" & new_op != "0")]
infs <- which(values(dist[new_op]) == Inf)
new_op <- new_op[as.integer(names(infs))]
options <- options[which(options != current)]
options <- c(as.integer(new_op), options)
}
return(list("dist"=dist$current+tree[end,]$LENGTH))
}
arboreal_dijkstra(tree, 9, 15)
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
arboreal_dijkstra(tree, 9, 15)
options
new_op
arboreal_dijkstra(tree, 9, 15)
arboreal_dijkstra(tree, 9, 15)
new_op
new_op[as.integer(names(infs))]
names(infs)
as.integer(names(infs))
new_op[3]
new_op[infs %in% new_op]
inds
infs
new_op[names(infs) %in% new_op]
new_op
names(infs)
names(infs) %in% new_op
new_op[which(infs == new_op)]
names(infs)
as.integer(names(infs))
names(infs)
names(infs) %in% new_op
new_op
>match
?match
match(names(infs), new_op)
new_op[match(names(infs), new_op)]
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
arboreal_dijkstra(tree, 9, 15)
dist
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
dist
arboreal_dijkstra(tree, 9, 15)
dist
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
arboreal_dijkstra(tree, 9, 15)
dist
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
dist
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
dist
current
dist[current]
dist[as.integer(current)]
arboreal_dijkstra(tree, 9, 15)
dist[as.integer(current)]
current
dist[0]
dist[as.character(current)]
arboreal_dijkstra(tree, 9, 15)
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
arboreal_dijkstra(tree, 9, 15)
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
new_op
as.integer(new_op)
dist
arboreal_dijkstra(tree, 9, 15)
dist[as.character(current)]
dist[[as.character(current)]]
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
dist
current
new_op
dist
current
new_op
current
current
dist
current
new_op
tree
current
new_ops
new_op
options
tree
arboreal_dijkstra(tree, 9, 15)
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
?match
options
end
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
source("asymmetric_generation.R")
arboreal_dijkstra(tree, 9, 15)
source("asymmetric_generation.R")
tree
source("asymmetric_generation.R")
tree_distances(tree)
?data.frame
cc <- c(1, 2, 3)
data.frame(cc)
t(cc)
data.frame(t(cc))
cc <- c()
cc
t(cc)
data.frame(t(cc)=integer(0))
?matrix
source("asymmetric_generation.R")
tree_distances(tree)
source("asymmetric_generation.R")
tree_distances(tree)
source("asymmetric_generation.R")
tree_distances(tree)
#food <- which(food==j)
distances[i,j] <- arboreal_dijkstra(tree, i, j)
source("asymmetric_generation.R")
tree_distances(tree)
source("asymmetric_generation.R")
tree_distances(tree)
source("asymmetric_generation.R")
tree_distances(tree)
nests <- which(as.logical(tree$NEST))
food <- which(as.logical(tree$FOOD))
?apply
apply(nests, food, arboreal_dijkstra())
apply(nests, food, arboreal_dijkstra, tree)
nests
food
?sapply
arboreal_dijkstra(tree, nests, food)
tree <- symmetric_uniform_tree()
tree
nests <- which(as.logical(tree$NEST))
food <- which(as.logical(tree$FOOD))
nests
food
arboreal_dijkstra(tree, nests, food)
for(i in nests) { for(j in food) { arboreal_dijkstra(tree, i, j)}}
arboreal_dijkstra(tree, 2, 1)
arboreal_dijkstra(tree, 2, 14)
arboreal_dijkstra(tree, 2, 10)
arboreal_dijkstra(tree, 2, 6)
arboreal_dijkstra(tree, 15, 15
)
source("asymmetric_generation.R")
source("asymmetric_generation.R")
for(i in nests) { for(j in food) { arboreal_dijkstra(tree, i, j)}}
for(i in nests) { for(j in food) { print(arboreal_dijkstra(tree, i, j))}}
dd <- matrix(nrow=2, ncol=2)
dd
dimnames(dd) <- list(c("1, 2"), c("1, 2"))
dimnames(dd) <- list(c("1", "2"), c("1", "2"))
dd
dd[1,2]
dd["1", "2"]
dimnames(dd) <- list(c("aa", "bb"), c("cc", "dd"))
dd["aa", "bb"]
dd[1,2]
dd["aa"]
dd
dd["aa"] <- 1
dd
dd
rownames(dd)
colnames(dd)
source("asymmetric_generation.R")
tree_distances(tree)
source("asymmetric_generation.R")
tree_distances(tree)
source("asymmetric_generation.R")
tree_distances(tree)
food
source("asymmetric_generation.R")
tree_distances(tree)
source("asymmetric_generation.R")
tree_distances(tree)
nests
source("asymmetric_generation.R")
tree_distances(tree)
?bioclim
library(raster)
?getData
Think about doing trials somehow to examine how distribution of paths changes as we vary parameters
Then we can address which assumptions need to be made to start running ants on tree, like branch memory
source("asymmetric_generation.R")
tree <- symmetric_uniform_tree()
tree
plot_tree_stats(tree)
dist <- tree_distances(tree)
dist
typeof(dist)
dist[1,1]
dd <- data.frame(dist)
dd
ddX2
dd$X2
as.vector(dist)
as.vector(dd)
as.vector(dist)[1]
dim(dist) <- NULL
dist
dist[1]
c(dist)
dist <- tree_distances(tree)
c(dist)
c(dist)[1]
c(dist)[2]
cbind(c(dist))
cbind(c(dist))[1]
cbind(c(dist))[2]
c(dist)
c(dist)$X2
matrix(dist)
matrix(dist)[1]
c(matrix(dist))
c(matrix(dist))[10]
c(matrix(dist))[1]
typeof(dist)
dist
dist$X13
unlist(dist)
unlist(dist, use.names=FALSE)
typeof(unlist(dist, use.names=FALSE))
c()
?ggplot
?vector
tree_trial(tree_method=symmetric_uniform_tree)
source("asymmetric_generation.R")
tree_trial(tree_method=symmetric_uniform_tree)
source("asymmetric_generation.R")
tree_trial(tree_method=symmetric_uniform_tree)
source("asymmetric_generation.R")
tree_trial(tree_method=symmetric_uniform_tree)
source("asymmetric_generation.R")
tree_trial(tree_method=symmetric_uniform_tree)
source("asymmetric_generation.R")
tree_trial(tree_method=symmetric_uniform_tree)
source("asymmetric_generation.R")
tree_trial(tree_method=symmetric_uniform_tree)
source("asymmetric_generation.R")
tree_trial(tree_method=symmetric_uniform_tree)
trees <- tree_trial(tree_method=symmetric_uniform_tree)
source("asymmetric_generation.R")
plot_distances(trees$dist)
source("asymmetric_generation.R")
plot_distances(trees$dist)
source("asymmetric_generation.R")
plot_distances(trees$dist)
source("asymmetric_generation.R")
plot_distances(trees$dist)
source("asymmetric_generation.R")
plot_distances(trees$dist)
source("asymmetric_generation.R")
plot_distances(trees$dist)
source("asymmetric_generation.R")
plot_distances(trees$dist)
trees$dist
source("asymmetric_generation.R")
source("asymmetric_generation.R")
plot_distances(trees$dist)
source("asymmetric_generation.R")
plot_distances(trees$dist)
source("asymmetric_generation.R")
plot_distances(trees$dist)
source("asymmetric_generation.R")
plot_distances(trees$dist)
source("asymmetric_generation.R")
plot_distances(trees$dist)
source("asymmetric_generation.R")
plot_distances(trees$dist)
source("asymmetric_generation.R")
plot_distances(trees$dist)
trees <- tree_trial(trials= 100, tree_method=symmetric_uniform_tree)
plot_distances(trees$dist)
a_trees <- tree_trial(trials= 100, tree_method=asymmetric_uniform_tree)
plot_distances(a_trees$dist)
a_trees$dist
source("asymmetric_generation.R")
plot_distances(a_trees$dist)
a_trees <- tree_trial(trials= 100, tree_method=asymmetric_uniform_tree)
source("asymmetric_generation.R")
plot_distances(a_trees$dist)
s_trees_e <- tree_trial(trials=100, tree_method=symmetric_extreme_tree)
plot_distances(s_trees_e$dist)
s_trees_e$trees
symmetric_extreme_tree()
which(as.logical(symmetric_extreme_tree()$FOOD))
s_trees_e <- tree_trial(trials=100, tree_method=symmetric_extreme_tree)
plot_distances(s_trees_e$dist)
a_trees_e <- tree_trial(trials=100, tree_method=asymmetric_extreme_tree)
plot_distances(a_trees_e$dist)
sym <- build_tree()
sym <- distribute_nests(sym, dgeom, (1/max(sym$BRANCH_ORDER)))
sym
sym <- distribute_nests(sym, dgeom, (1/max(sym$BRANCH_ORDER)))
sym
sym <- distribute_nests(sym, dgeom, (1/max(sym$BRANCH_ORDER)))
sym
s_trees_e <- tree_trial(trials=1000, tree_method=symmetric_extreme_tree)
plot_distances(s_trees_e$dist)
a_trees_u <- tree_trial(trials=100, tree_method=asymmetric_extreme_tree, trunk=list(L=10000, R=100))
source("asymmetric_generation.R")
a_trees_u <- tree_trial(trials=100, tree_method=asymmetric_extreme_tree, trunk=list(L=10000, R=100))
a_trees_u <- tree_trial(trials=100, tree_method=asymmetric_uniform_tree, trunk=list(L=10000, R=100))
source("asymmetric_generation.R")
source("asymmetric_generation.R")
source("asymmetric_generation.R")
a_trees_u <- tree_trial(trials=100, tree_method=asymmetric_uniform_tree, trunk=list(L=10000, R=100))
a_trees_u$trees[[1]]
plot_distances(a_trees_u$dist)
a_trees_e <- tree_trial(trials=100, tree_method=asymmetric_extreme_tree, trunk=list(L=10000, R=100))
plot_distances(a_trees_e$dist)
source("ant_foraging.R")
run_ant(a_trees_e[[1]], choose_random)
a_trees_e
a_trees_e[[1]]
a_trees_e$trees[[1]]
run_ant(a_trees_e$trees[[1]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
source("ant_foraging.R")
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_random)
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
a_trees_e$trees[[2]][5,]
?sample
a_trees_e$trees[[2]]
run_ant(a_trees_e$trees[[2]], choose_random)
a_trees_e$trees[[2]]
run_ant(a_trees_e$trees[[2]], choose_random)
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
sample(6)
sample(6, 1)
sample(c(6, 2), 1)
sample(c(6, 2), 1)
sample(c(6, 2), 1)
sample(c(6, 2), 1)
sample(c(6, 2), 1)
sample(c(6, 2), 1)
sample(c(6, 2), 1)
sample(c(6, 2), 1)
length(6)
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_random)
a_trees_e$trees[[2]][6,]
as.logical(a_trees_e$trees[[2]][6,]$FOOD)
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_random)
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_random)
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_random)
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_random)
?paste
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_random)
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_random)
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_random)
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_random)
as.logical(a_trees_e$trees[[2]][2,]$FOOD)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
c(0)
0
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_skinny)
run_ant(a_trees_e$trees[[2]], choose_skinny)
run_ant(a_trees_e$trees[[2]], choose_skinny)
a_trees_e$trees[[2]]
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_skinny)
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_skinny)
source("ant_foraging.R")
run_ant(a_trees_e$trees[[2]], choose_skinny)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_skinny)
run_ant(a_trees_e$trees[[2]], choose_random)
run_ant(a_trees_e$trees[[2]], choose_random)
tree
a_trees_e$trees[[2]]
a_trees_e$trees[[6]]
s_u_t <- tree_trial(trials = 100, symmetric_uniform_tree, trunk=list(L=10000, R=1000))
c(FALSE) * 10
ff <- rep(FALSE, 10)
ff
plot_distances(s_u_t$dist)
s_u_t$trees[[1]]
source("asymmetric_generation.R")
plot_distances(s_u_t$dist)
source("asymmetric_generation.R")
plot_distances(s_u_t$dist)
source("asymmetric_generation.R")
plot_distances(s_u_t$dist)
source("asymmetric_generation.R")
plot_distances(s_u_t$dist)
source("asymmetric_generation.R")
plot_distances(s_u_t$dist)
a_u_t <- tree_trial(trials = 100, asymmetric_uniform_tree, trunk=list(L=10000, R=1000))
plot_distances(a_u_t$dist)
source("asymmetric_generation.R")
lenght(s_u_t)
length(s_u_t)
length(s_u_t$trees)
length(a_u_t$trees)
s_m_t <- tree_trial(trials = 100, symmetric_marginal_tree, trunk=list(L=10000, R=1000))
plot_distances(s_m_t$dist)
a_m_t <- tree_trial(trials = 100, asymmetric_marginal_tree, trunk=list(L=10000, R=1000))
plot_distances(a_m_t$dist)
source("ant_foraging.R"
)
run_ant(a_u_t$trees[[1]], choose_depth)
run_ant(a_u_t$trees[[2]], choose_depth)
a_u_t$trees[[2]]
a_u_t_res <- run_ant(a_u_t$trees[[2]], choose_depth)
a_u_t_res
plot_strategy(list("result"=a_u_t_res))
typeof(a_u_t_res)
source("ant_foraging.R")
plot_strategy(list("result"=a_u_t_res))
source("ant_foraging.R")
plot_strategy(list("result"=a_u_t_res))
source("ant_foraging.R")
plot_strategy(list("result"=a_u_t_res))
list("result"=a_u_t_res)
plot_strategy(list("process"=a_u_t_res))
source("ant_foraging.R")
plot_strategy(list("process"=a_u_t_res))
source("ant_foraging.R")
plot_strategy(list("process"=a_u_t_res))
source("ant_foraging.R")
plot_strategy(list("process"=a_u_t_res))
a_u_t_res <- test_trees(a_u_t$trees, choose_depth)
source("ant_foraging.R")
a_u_t_res <- test_trees(a_u_t$trees, choose_depth)
source("ant_foraging.R")
a_u_t_res <- test_trees(a_u_t$trees, choose_depth)
plot_strategy(a_u_t_res)
s_u_t_res <- test_trees(s_u_t$trees, choose_depth)
plot_strategy(s_u_t_res)
a_m_t_res <- test_trees(a_m_t$trees, choose_depth)
plot_strategy(a_m_t_res)
s_m_t_res <- test_trees(s_m_t$trees, choose_depth)
plot_strategy(s_m_t_res)
s_u_t <- tree_trial(trials = 100, symmetric_uniform_tree, trunk=list(L=10000, R=1000))
