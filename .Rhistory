ggplot(nn, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges() +
geom_nodes(aes(color=order), size = 2) +
theme_blank()
ggplot(nn, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges() +
geom_nodes(size = 2) +
theme_blank()
a <- network(adjacency)
nn <- ggnetwork(a, layout = 'kamadakawai', niter=2000)
ggplot(nn, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges() +
geom_nodes(size = 2) +
theme_blank()
source("asymmetric_plotting.R")
plot_tree_network(sap)
source("asymmetric_plotting.R")
plot_tree_network(sap)
?geom_segment
?geom_edges
source("asymmetric_analysis.R")
sap_data <- asymmetric_branching(sap)
sap_data <- asymmetric_branching(1, sap, 0, 0)
warnings()
sap_data
sap_data[5.]["GAMMA"]
sap_data[5,]["GAMMA"]
sap_data[5,"GAMMA"]
sap_data["GAMMA"]
sap_data[["GAMMA"]]
x <- "GAMMA"
sap_data[,x
]
sap_data[,x]
sap_data
sap_data <- sap_data$data
sap_data[,x]
sap_data[5,x]
source("asymmetric_plotting.R")
plot_tree_network(sap_data, "THETA")
which(is.na(sap_data$THETA) )
range(sap_data$THETA)
range(sap_data$THETA, na.rm=TRUE)
plot_tree_network(sap_data, "WBE_THETA")
sap_data <- branching_analysis(sap)
guy01r9 <- open_TreeQSM("data/oxford/cyl_data_GUY01_000_r9_8_0.2_1.txt")
source("asymmetric_munge.R")
guy01r9 <- open_TreeQSM("data/oxford/cyl_data_GUY01_000_r9_8_0.2_1.txt")
guy01r18 <- open_TreeQSM("data/oxford/cyl_data_GUY01_000_r18_8_0.2_1.txt")
guy9 <- oxford_munge(guy01r9)
guy18 <- oxford_munge(guy01r18)
guy18_data <- branching_analysis(guy18)
guy9_data <- branching_analysis(guy9)
plot_tree_network(guy18_data, "THETA")
plot_tree_network(guy9_data, "THETA")
source("asymmetric_plotting.R")
source("analyse.R")
guy9_data <- branching_analysis(guy9)
guy9_data <- branching_analysis(guy9)
source("analyse.R")
guy9_data <- branching_analysis(guy9)
which(guy18_data$POS)
warnings()
source("analyse.R")
guy9_data <- branching_analysis(guy9)
guy9 <- oxford_munge(guy01r9)
guy9_data <- branching_analysis(guy9)
warnings()
fucked <- guy9_data[which(guy9_data$INVALID),]
ggplot(fucked, aes(x=BETA, y=GAMMA)) + geom_point()
nrow(fucked)
ggplot(fucked, aes(x=D_BETA, y=D_GAMMA)) + geom_point()
ggplot(fucked, aes(x=VOLUME, y=THETA)) + geom_point()
guy9_data <- branching_analysis(guy9)
fucked <- guy9_data[which(guy9_data$INVALID),]
ggplot(fucked, aes(x=VOLUME, y=THETA)) + geom_point()
source("analyse.R")
guy9_data <- branching_analysis(guy9)
fucked <- guy9_data[which(guy9_data$INVALID),]
ggplot(fucked, aes(x=VOLUME, y=THETA)) + geom_point()
ggplot(fucked, aes(x=BETA, y=GAMMA)) + geom_point()
source("analyse.R")
guy9_data <- branching_analysis(guy9)
fucked <- guy9_data[which(guy9_data$INVALID),]
ggplot(fucked, aes(x=BETA, y=GAMMA)) + geom_point()
ggplot(fucked, aes(x=VOLUME, y=THETA)) + geom_point()
ggplot(fucked, aes(x=BETA, y=GAMMA)) + geom_point()
ggplot(fucked, aes(x=VOLUME, y=THETA)) + geom_point()
ggplot(fucked, aes(x=VOLUME, y=WBE_THETA)) + geom_point()
ggplot(fucked[which(fucked$WBE_THETA < 10),], aes(x=VOLUME, y=WBE_THETA)) + geom_point()
ggplot(fucked[which(fucked$WBE_THETA < 10 & fucked$WBE_THETA > -10),], aes(x=VOLUME, y=WBE_THETA)) + geom_point()
ggplot(fucked[which(fucked$WBE_THETA < 1 & fucked$WBE_THETA > -1),], aes(x=VOLUME, y=WBE_THETA)) + geom_point()
ggplot(fucked[which(fucked$WBE_THETA < 5 & fucked$WBE_THETA > -1),], aes(x=VOLUME, y=WBE_THETA)) + geom_point()
ggplot(fucked[which(fucked$WBE_THETA < 10),], aes(x=VOLUME, y=WBE_THETA)) + geom_point()
ggplot(fucked[which(fucked$WBE_THETA < 10 & fucked$WBE_THETA > -10),], aes(x=VOLUME, y=WBE_THETA)) + geom_point()
ggplot(fucked[which(fucked$WBE_THETA < 100 & fucked$WBE_THETA > -100),], aes(x=VOLUME, y=WBE_THETA)) + geom_point()
ggplot(fucked[which(fucked$WBE_THETA < 100 & fucked$WBE_THETA > -100),], aes(x=GAMMA, y=WBE_THETA)) + geom_point()
ggplot(fucked, aes(x=GAMMA, y=WBE_THETA)) + geom_point()
ggplot(fucked, aes(x=BETA, y=WBE_THETA)) + geom_point()
ggplot(fucked[which(fucked$WBE_THETA < 100 & fucked$WBE_THETA > -100),], aes(x=BETA, y=WBE_THETA)) + geom_point()
ggplot(fucked, aes(x=BETA, y=GAMMA)) + geom_point(aes(color=WBE_THETA))
ggplot(fucked[which(fucked$WBE_THETA < 100 & fucked$WBE_THETA > -100),], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=WBE_THETA))
ggplot(fucked[which(fucked$WBE_THETA < 10 & fucked$WBE_THETA > -10),], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=WBE_THETA))
ggplot(fucked[which(fucked$WBE_THETA < 10 & fucked$WBE_THETA > -1),], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=WBE_THETA))
ggplot(guy9_data, aes(x=BETA, y=GAMMA)) + geom_point(shape=INVALID)
ggplot(guy9_data, aes(x=BETA, y=GAMMA)) + geom_point(shape=factor(INVALID))
guy9_data
ggplot(guy9_data, aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID))
ggplot(guy9_data, aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID)) + stat_function(fun=function(x,y) -((log(pow(x, 2)*y)/log(2))))
7^2
ggplot(guy9_data, aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID)) + stat_function(fun=function(x,y) -((log(x^2*y)/log(2))))
ggplot(guy9_data, aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID)) + stat_function(fun=function(x,y)-((log(x^2*y)/log(2))))
?stat_function
ggplot(guy9_data, aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID)) + stat_function(fun=function(x,y){-((log(x^2*y)/log(2)))})
?stat_function
ggplot(guy9_data, aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
ggplot(guy9_data[which(guy9_data$WBE_THETA<100)], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
ggplot(guy9_data[which(guy9_data$WBE_THETA<100),], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
ggplot(guy9_data[which(guy9_data$WBE_THETA<100 & guy9_data$WBE_THETA>-100),], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
ggplot(guy9_data[which(guy9_data$WBE_THETA<2 & guy9_data$WBE_THETA>-10),], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
wbe <- function(x,y){-((log(x^2*y)/log(2)))}
wbe(1.2, 1)
wbe(1.2, 0.5)
wbe(0.8, 0.5)
wbe(0.8, 0.8)
wbe(0.8, 0.5)
wbe(0.8, 0.4)
wbe(0.8, 0.3)
wbe(0.8, 0.2)
plot(wbe)
wbe <- function(x,y){-((log((x^2)*y)/log(2))^(-1))}
wbe(0.8, 0.2)
wbe(0.8, 0.5)
wbe(0.8, 1)
wbe(0.8, 0.9)
wbe(0.8, 0.8)
wbe(0.8, 0.75)
wbe(0.75, 0.75)
wbe(0.70, 0.79)
ggplot(guy9_data[which(guy9_data$WBE_THETA<10 & guy9_data$WBE_THETA>-10),], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
wbe(1, 1)
wbe(1, 1.5)
wbe(1.5, 1.5)
wbe(1.5, 10.5)
wbe(0.9, 0.9)
wbe(0.9, 0.99)
wbe(0.99, 0.99)
wbe(0.9999, 0.9999)
ggplot(guy9_data[which(guy9_data$WBE_THETA<10 & guy9_data$WBE_THETA>0),], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
ggplot(guy9_data[which(guy9_data$WBE_THETA<100 & guy9_data$WBE_THETA>0),], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
ggplot(guy9_data[which(guy9_data$WBE_THETA<1000 & guy9_data$WBE_THETA>0),], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
ggplot(guy9_data[which(guy9_data$WBE_THETA<200 & guy9_data$WBE_THETA>0),], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
ggplot(guy9_data[which(guy9_data$WBE_THETA<100 & guy9_data$WBE_THETA>0),], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
ggplot(guy9_data[which(guy9_data$WBE_THETA<10 & guy9_data$WBE_THETA>0),], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
ggplot(guy9_data[which(guy9_data$WBE_THETA>1 & guy9_data$WBE_THETA<0),], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
ggplot(guy9_data[which(guy9_data$WBE_THETA<10 & guy9_data$WBE_THETA>0),], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
ggplot(guy9_data[which(guy9_data$WBE_THETA<10 & guy9_data$WBE_THETA>-10),], aes(x=BETA, y=GAMMA)) + geom_point(aes(shape=INVALID, color=WBE_THETA))
ggplot(fucked, aes(x=BETA, y=GAMMA)) + geom_point(aes(color=THETA))
ggplot(fucked[which(fucked$THETA < 10 & > -1)], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=THETA))
ggplot(fucked[which(fucked$THETA > -1)], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=THETA))
ggplot(fucked[which(fucked$THETA > -1),], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=THETA))
ggplot(fucked[which(fucked$THETA > -1 & fucked$THETA < 3),], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=THETA))
ggplot(fucked[which(fucked$THETA > -1 & fucked$THETA < 3),], aes(x=D_BETA, y=D_GAMMA)) + geom_point(aes(color=THETA))
which(fucked$GAMMA > 1 | fucked$BETA > 1)
View(guy9_data)
length(which(fucked$GAMMA > 1 | fucked$BETA > 1))
nrow(fucked)
length(which(log(2) > log(fucked$GAMMA*fucked$BETA^2)))
which(fucked$THETA > 0 & fucked$THETA < 1)
length(which(fucked$THETA > 0 & fucked$THETA < 1))
ggplot(fucked[which(log(2) > log(fucked$GAMMA*fucked$BETA^2)),]) + geom_point(aes(color=WBE_THETA))
ggplot(fucked[which(log(2) > log(fucked$GAMMA*fucked$BETA^2)),], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=WBE_THETA))
ggplot(fucked[which(fucked$GAMMA > 1 | fucked$BETA > 1),], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=WBE_THETA))
ggplot(fucked[0 > log(fucked$GAMMA*fucked$BETA^2)),], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=WBE_THETA))
ggplot(fucked[which(0 > log(fucked$GAMMA*fucked$BETA^2)),], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=WBE_THETA))
ggplot(fucked[which(1 < log(fucked$GAMMA*fucked$BETA^2)),], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=WBE_THETA))
fucked[which(1 < log(fucked$GAMMA*fucked$BETA^2))
,]
which(fucked$WBE_THETA < 0)
ggplot(fucked[which(fucked$WBE_THETA < 0),], aes(x=WBE_THETA)) + geom_bar()
ggplot(fucked[which(fucked$WBE_THETA < 0),], aes(x=WBE_THETA)) + geom_hist()
ggplot(fucked[which(fucked$WBE_THETA < 0),], aes(x=WBE_THETA)) + geom_histogram()
ggplot(fucked[which(fucked$WBE_THETA < 0),], aes(x=WBE_THETA, y=THETA)) + geom_point()
tree_metadata <- read.csv("data/tree_metadata.csv")
tree_metadata$FILE
tree_metadata <- read.csv("data/tree_metadata.csv")
tree_metadata$FILE
?read.csv
directory
dir
dir("data/results")
dir("data/results/cyl_data*")
list.files("data/results/cyl_data_*.txt")
list.files(path="data/results/", pattern="cyl_data_*.txt")
list.files(path="data/results/", pattern="cyl_data_.*.txt")
list.files(path="data/results/", pattern="*.txt")
list.files(path="data/results/", pattern="cyl_data_*.txt")
list.files(path="data/results/", pattern=".cyl_data_*.txt")
list.files(path="data/results/", pattern="\\cyl_data_*.txt")
list.files(path="data/results/", pattern="[cyl_data_]*.txt")
list.files(path="data/results/", pattern="[cyl_data_]+.txt")
list.files(path="data/results/", pattern="+[cyl_data_]*.txt")
list.files(path="data/results/", pattern="+[cyl_data_].txt")
list.files(path="data/results/", pattern="[cyl_data_].txt")
list.files(path="data/results/", pattern="cyl_data_.txt")
list.files(path="data/results/", pattern="cyl_data_+.txt")
list.files(path="data/results/", pattern="^cyl_data_*.txt")
list.files(path="data/results/", pattern="^cyl_data_.txt")
list.files(path="data/results/", pattern="^cyl_data_")
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
?split
?strsplit
strsplit(cylinder_data_names, split="^cyl_data_[*][\.pcd]")
strsplit(cylinder_data_names, split="^cyl_data_[*][\\.pcd]")
strsplit(cylinder_data_names, split="^cyl_data_[\\.pcd]")
?gsub
gsub(".*cyl_data_ *(.*?) *.pcd.*", cylinder_data_names)
gsub(".*cyl_data_ *(.*?) *.pcd.*", x=cylinder_data_names)
gsub(pattern=".*cyl_data_ *(.*?) *.pcd.*", x=cylinder_data_names)
gsub(pattern=".*cyl_data_ *(.*?) *.pcd.*", "", x=cylinder_data_names)
sub(pattern=".*cyl_data_ *(.*?) *.pcd.*", "\\1", x=cylinder_data_names)
cylinder_data_names
?paste
paste("data/results/", cylinder_data_names)
cylinder_data_names <- paste("data/results/", cylinder_data_names, collapse="")
cyl_data <- open_TreeQSM(cylinder_data_names[1])
source("munge.R")
source("analyse.R")
cyl_data <- open_TreeQSM(cylinder_data_names[1])
cylinder_data_names[1]
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
cylinder_data_names <- paste("data/results/", cylinder_data_names, collapse="")
cylinder_data_names
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
cylinder_data_names <- paste("data/results/", cylinder_data_names, sep="")
cylinder_data_names
cyl_data <- open_TreeQSM(cylinder_data_names[1])
?rep
source("munge.R")
source("analyse.R")
tree_metadata <- read.csv("data/tree_metadata.csv", stringsAsFactors = FALSE)
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
stripped_names <- sub(pattern=".*cyl_data_ *(.*?) *.pcd.*", "\\1", x=cylinder_data_names)
cylinder_data_names <- paste("data/results/", cylinder_data_names, sep="")
cyl_data <- open_TreeQSM(cylinder_data_names[1])
cyl_data$FILENAME <- rep(stripped_names[1], nrow(cyl_data))
for(i in seq(2, length(cylinder_data_names)))
{
data <- open_TreeQSM(cylinder_data_names[i])
data$FILENAME <- rep(stripped_names[i], nrow(cyl_data))
cyl_data <- rbind(cyl_data, data)
}
source("munge.R")
source("analyse.R")
tree_metadata <- read.csv("data/tree_metadata.csv", stringsAsFactors = FALSE)
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
stripped_names <- sub(pattern=".*cyl_data_ *(.*?) *.pcd.*", "\\1", x=cylinder_data_names)
cylinder_data_names <- paste("data/results/", cylinder_data_names, sep="")
cyl_data <- open_TreeQSM(cylinder_data_names[1])
cyl_data$FILENAME <- rep(stripped_names[1], nrow(cyl_data))
for(i in seq(2, length(cylinder_data_names)))
{
data <- open_TreeQSM(cylinder_data_names[i])
data$FILENAME <- rep(stripped_names[i], nrow(data))
cyl_data <- rbind(cyl_data, data)
}
?pmax
read.csv("data/results/tree_data_8_sans_feuilles.pcd_t1_m1_D0.15_DA0.06_DI0.03_L3_F3.txt")
read.csv("data/results/tree_data_8_sans_feuilles.pcd_t1_m1_D0.15_DA0.06_DI0.03_L3_F3.txt", header = FALSE)
read.csv("data/results/tree_data_Ery_01.pcd_t1_m1_D0.15_DA0.06_DI0.02_L3_F3.txt", header = FALSE)
tt <- read.csv("data/results/tree_data_Ery_01.pcd_t1_m1_D0.15_DA0.06_DI0.02_L3_F3.txt", header = FALSE)
t(tt)
colnames(t(tt)) <- c("TREE_VOLUME", "TRUNK_VOLUME", "BRANCH_VOLUME", "TREE_HEIGHT", "TRUNK_LENGTH", "BRANCH_LENGTH",
"NUM_BRANCHES", "MAX_BRANCH_ORDER", "TREE_AREA", "DBH_QSM", "DBH_CYL")
colnames(t(tt))
colnames(t(tt)) <- c("TREE_VOLUME", "TRUNK_VOLUME", "BRANCH_VOLUME", "TREE_HEIGHT", "TRUNK_LENGTH", "BRANCH_LENGTH",
"NUM_BRANCHES", "MAX_BRANCH_ORDER", "TREE_AREA", "DBH_QSM", "DBH_CYL")
typeof(t(tt))
colnames(t(tt)) <- rep("Ass", 11)
as.data.frame(t(tt))
?join
tree_data
source("munge.R")
source("analyse.R")
tree_metadata <- read.csv("data/tree_metadata.csv", stringsAsFactors = FALSE)
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
stripped_names <- sub(pattern=".*cyl_data_ *(.*?) *.pcd.*", "\\1", x=cylinder_data_names)
cylinder_data_names <- paste("data/results/", cylinder_data_names, sep="")
cylinder_data <- open_TreeQSM(cylinder_data_names[1])
cylinder_data$FILENAME <- rep(stripped_names[1], nrow(cylinder_data))
tree_data_names <- list.files(path="data/results/", pattern="^tree_data_")
tree_data_names <- paste("data/results/", tree_data_names, sep="")
tree_data_vars <- c("FILENAME", "TREE_VOLUME", "TRUNK_VOLUME", "BRANCH_VOLUME", "TREE_HEIGHT", "TRUNK_LENGTH",
"BRANCH_LENGTH", "NUM_BRANCHES", "MAX_BRANCH_ORDER", "TREE_AREA", "DBH_QSM", "DBH_CYL")
tree_data <- as.data.frame(t(read.csv(tree_data_names[1], header = FALSE)))
tree_data$FILENAME <- rep(stripped_names[1], nrow(cylinder_data))
#We might try the entire analysis with different definitions of branch, rather than using
#cylinders which are fine-grained internodes. Ignores biology of bifurcations somewhat (a lot)
#branch_data_names <- list.files(path="data/results/", pattern="^branch_data_")
for(i in seq(2, length(cylinder_data_names)))
{
print(paste("Working on tree:", stripped_names[i]))
tr_data <- as.data.frame(t(read.csv(tree_data_names[i], header = FALSE)))
tr_data$FILENAME <- rep(stripped_names[i], nrow(tr_data))
#cyl_data <- open_TreeQSM(cylinder_data_names[i])
#cyl_data <- branching_analysis(cyl_data)
#cyl_data$FILENAME <- rep(stripped_names[i], nrow(cyl_data))
tree_data <- rbind(tree_data, tr_data)
#cylinder_data <- rbind(cylinder_data, cyl_data)
}
#Interact with metadata for whole-tree parameters
joined_data <- join(tree_data, tree_metadata, by="FILENAME")
tr_data
tree_data
tree_data$FILENAME <- stripped_names[1]
tree_data
tree_data <- data.frame(FILENAME=character(num_trees), TREE_VOLUME=numeric(num_trees), TRUNK_VOLUME=numeric(num_trees),
BRANCH_VOLUME=numeric(num_trees), TREE_HEIGHT=numeric(num_trees), TRUNK_LENGTH=numeric(num_trees),
BRANCH_LENGTH=numeric(num_trees), NUM_BRANCHES=integer(num_trees), MAX_BRANCH_ORDER=integer(num_trees),
TREE_AREA=numeric(num_trees), DBH_QSM=numeric(num_trees), DBH_CYL=numeric(num_trees))
num_trees = length(cylinder_data_names)
tree_data <- data.frame(FILENAME=character(num_trees), TREE_VOLUME=numeric(num_trees), TRUNK_VOLUME=numeric(num_trees),
BRANCH_VOLUME=numeric(num_trees), TREE_HEIGHT=numeric(num_trees), TRUNK_LENGTH=numeric(num_trees),
BRANCH_LENGTH=numeric(num_trees), NUM_BRANCHES=integer(num_trees), MAX_BRANCH_ORDER=integer(num_trees),
TREE_AREA=numeric(num_trees), DBH_QSM=numeric(num_trees), DBH_CYL=numeric(num_trees))
tree_data[1,] <- as.data.frame(t(read.csv(tree_data_names[1], header = FALSE)))
as.data.frame(t(read.csv(tree_data_names[1], header = FALSE)))
tree_data[1,] <- c(stripped_names[1], as.data.frame(t(read.csv(tree_data_names[1], header = FALSE))))
tree_data
read.csv(tree_data_names[1], header = FALSE)
read.csv(tree_data_names[1], header = FALSE)[1:11]
read.csv(tree_data_names[1], header = FALSE)[,1:11]
read.csv(tree_data_names[1], header = FALSE)[1:11,]
tree_data[1,] <- c(stripped_names[1], as.data.frame(t(read.csv(tree_data_names[1], header = FALSE)[1:11,])))
tree_data <- data.frame(FILENAME=character(num_trees), TREE_VOLUME=numeric(num_trees), TRUNK_VOLUME=numeric(num_trees),
BRANCH_VOLUME=numeric(num_trees), TREE_HEIGHT=numeric(num_trees), TRUNK_LENGTH=numeric(num_trees),
BRANCH_LENGTH=numeric(num_trees), NUM_BRANCHES=integer(num_trees), MAX_BRANCH_ORDER=integer(num_trees),
TREE_AREA=numeric(num_trees), DBH_QSM=numeric(num_trees), DBH_CYL=numeric(num_trees))
tree_data[1,] <- c(stripped_names[1], as.data.frame(t(read.csv(tree_data_names[1], header = FALSE)[1:11,])))
stripped_names
c(stripped_names[1], as.data.frame(t(read.csv(tree_data_names[1], header = FALSE)[1:11,])))
read.csv(tree_data_names[1], header = FALSE)
as.vector(read.csv(tree_data_names[1], header = FALSE))
?scan
scan(tree_data_names[1], header = FALSE))
scan(tree_data_names[1])
scan(tree_data_names[1])[1:11]
source("munge.R")
source("analyse.R")
tree_metadata <- read.csv("data/tree_metadata.csv", stringsAsFactors = FALSE)
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
stripped_names <- sub(pattern=".*cyl_data_ *(.*?) *.pcd.*", "\\1", x=cylinder_data_names)
cylinder_data_names <- paste("data/results/", cylinder_data_names, sep="")
cylinder_data <- open_TreeQSM(cylinder_data_names[1])
cylinder_data$FILENAME <- rep(stripped_names[1], nrow(cylinder_data))
num_trees = length(cylinder_data_names)
tree_data_names <- list.files(path="data/results/", pattern="^tree_data_")
tree_data_names <- paste("data/results/", tree_data_names, sep="")
tree_data <- data.frame(FILENAME=character(num_trees), TREE_VOLUME=numeric(num_trees), TRUNK_VOLUME=numeric(num_trees),
BRANCH_VOLUME=numeric(num_trees), TREE_HEIGHT=numeric(num_trees), TRUNK_LENGTH=numeric(num_trees),
BRANCH_LENGTH=numeric(num_trees), NUM_BRANCHES=integer(num_trees), MAX_BRANCH_ORDER=integer(num_trees),
TREE_AREA=numeric(num_trees), DBH_QSM=numeric(num_trees), DBH_CYL=numeric(num_trees))
tree_data[1,] <- c(stripped_names[1], scan(tree_data_names[1])[1:11])
#We might try the entire analysis with different definitions of branch, rather than using
#cylinders which are fine-grained internodes. Ignores biology of bifurcations somewhat (a lot)
#branch_data_names <- list.files(path="data/results/", pattern="^branch_data_")
for(i in seq(2, length(cylinder_data_names)))
{
print(paste("Working on tree:", stripped_names[i]))
tree_data[i,] <- c(stripped_names[i], scan(tree_data_names[i])[1:11])
#cyl_data <- open_TreeQSM(cylinder_data_names[i])
#cyl_data <- branching_analysis(cyl_data)
#cyl_data$FILENAME <- rep(stripped_names[i], nrow(cyl_data))
tree_data <- rbind(tree_data, tr_data)
#cylinder_data <- rbind(cylinder_data, cyl_data)
}
#Interact with metadata for whole-tree parameters
joined_data <- merge(tree_data, tree_metadata, by="FILENAME")
tree_data
source("munge.R")
source("analyse.R")
tree_metadata <- read.csv("data/tree_metadata.csv", stringsAsFactors = FALSE)
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
stripped_names <- sub(pattern=".*cyl_data_ *(.*?) *.pcd.*", "\\1", x=cylinder_data_names)
cylinder_data_names <- paste("data/results/", cylinder_data_names, sep="")
cylinder_data <- open_TreeQSM(cylinder_data_names[1])
cylinder_data$FILENAME <- rep(stripped_names[1], nrow(cylinder_data))
num_trees = length(cylinder_data_names)
tree_data_names <- list.files(path="data/results/", pattern="^tree_data_")
tree_data_names <- paste("data/results/", tree_data_names, sep="")
tree_data <- data.frame(FILENAME=character(num_trees), TREE_VOLUME=numeric(num_trees), TRUNK_VOLUME=numeric(num_trees),
BRANCH_VOLUME=numeric(num_trees), TREE_HEIGHT=numeric(num_trees), TRUNK_LENGTH=numeric(num_trees),
BRANCH_LENGTH=numeric(num_trees), NUM_BRANCHES=integer(num_trees), MAX_BRANCH_ORDER=integer(num_trees),
TREE_AREA=numeric(num_trees), DBH_QSM=numeric(num_trees), DBH_CYL=numeric(num_trees))
tree_data[1,] <- c(stripped_names[1], scan(tree_data_names[1])[1:11])
#We might try the entire analysis with different definitions of branch, rather than using
#cylinders which are fine-grained internodes. Ignores biology of bifurcations somewhat (a lot)
#branch_data_names <- list.files(path="data/results/", pattern="^branch_data_")
for(i in seq(2, length(cylinder_data_names)))
{
print(paste("Working on tree:", stripped_names[i]))
tree_data[i,] <- c(stripped_names[i], scan(tree_data_names[i])[1:11])
#cyl_data <- open_TreeQSM(cylinder_data_names[i])
#cyl_data <- branching_analysis(cyl_data)
#cyl_data$FILENAME <- rep(stripped_names[i], nrow(cyl_data))
#cylinder_data <- rbind(cylinder_data, cyl_data)
}
#Interact with metadata for whole-tree parameters
joined_data <- merge(tree_data, tree_metadata, by="FILENAME")
joined_data
?merge
#Interact with metadata for whole-tree parameters
joined_data <- merge(tree_data, tree_metadata, by="FILENAME", all=TRUE)
joined_data
tree_data
source("munge.R")
source("analyse.R")
tree_metadata <- read.csv("data/tree_metadata.csv", stringsAsFactors = FALSE)
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
stripped_names <- sub(pattern=".*cyl_data_ *(.*?) *.pcd.*", "\\1", x=cylinder_data_names)
cylinder_data_names <- paste("data/results/", cylinder_data_names, sep="")
cylinder_data <- open_TreeQSM(cylinder_data_names[1])
cylinder_data$FILENAME <- rep(stripped_names[1], nrow(cylinder_data))
num_trees = length(cylinder_data_names)
tree_data_names <- list.files(path="data/results/", pattern="^tree_data_")
tree_data_names <- paste("data/results/", tree_data_names, sep="")
tree_data <- data.frame(FILENAME=character(num_trees), TREE_VOLUME=numeric(num_trees), TRUNK_VOLUME=numeric(num_trees),
BRANCH_VOLUME=numeric(num_trees), TREE_HEIGHT=numeric(num_trees), TRUNK_LENGTH=numeric(num_trees),
BRANCH_LENGTH=numeric(num_trees), NUM_BRANCHES=integer(num_trees), MAX_BRANCH_ORDER=integer(num_trees),
TREE_AREA=numeric(num_trees), DBH_QSM=numeric(num_trees), DBH_CYL=numeric(num_trees))
tree_data[1,] <- c(stripped_names[1], scan(tree_data_names[1])[1:11])
#We might try the entire analysis with different definitions of branch, rather than using
#cylinders which are fine-grained internodes. Ignores biology of bifurcations somewhat (a lot)
#branch_data_names <- list.files(path="data/results/", pattern="^branch_data_")
for(i in seq(2, length(cylinder_data_names)))
{
print(paste("Working on tree:", stripped_names[i]))
tree_data[i,] <- c(stripped_names[i], scan(tree_data_names[i])[1:11])
#cyl_data <- open_TreeQSM(cylinder_data_names[i])
#cyl_data <- branching_analysis(cyl_data)
#cyl_data$FILENAME <- rep(stripped_names[i], nrow(cyl_data))
#cylinder_data <- rbind(cylinder_data, cyl_data)
}
#Interact with metadata for whole-tree parameters
joined_data <- merge(tree_data, tree_metadata, by="FILENAME", all=TRUE)
joined_data
tree_data
stripped_names
tree_data_names
tree_metadata
tree_data
source("munge.R")
source("analyse.R")
tree_metadata <- read.csv("data/tree_metadata.csv", stringsAsFactors = FALSE)
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
stripped_names <- sub(pattern=".*cyl_data_ *(.*?) *.pcd.*", "\\1", x=cylinder_data_names)
cylinder_data_names <- paste("data/results/", cylinder_data_names, sep="")
cylinder_data <- open_TreeQSM(cylinder_data_names[1])
cylinder_data$FILENAME <- rep(stripped_names[1], nrow(cylinder_data))
num_trees = length(cylinder_data_names)
tree_data_names <- list.files(path="data/results/", pattern="^tree_data_")
tree_data_names <- paste("data/results/", tree_data_names, sep="")
tree_data <- data.frame(FILENAME=character(num_trees), TREE_VOLUME=numeric(num_trees), TRUNK_VOLUME=numeric(num_trees),
BRANCH_VOLUME=numeric(num_trees), TREE_HEIGHT=numeric(num_trees), TRUNK_LENGTH=numeric(num_trees),
BRANCH_LENGTH=numeric(num_trees), NUM_BRANCHES=integer(num_trees), MAX_BRANCH_ORDER=integer(num_trees),
TREE_AREA=numeric(num_trees), DBH_QSM=numeric(num_trees), DBH_CYL=numeric(num_trees))
tree_data[1,] <- c(stripped_names[1], scan(tree_data_names[1])[1:11])
#We might try the entire analysis with different definitions of branch, rather than using
#cylinders which are fine-grained internodes. Ignores biology of bifurcations somewhat (a lot)
#branch_data_names <- list.files(path="data/results/", pattern="^branch_data_")
for(i in seq(2, length(cylinder_data_names)))
{
print(paste("Working on tree:", stripped_names[i]))
tree_data[i,] <- c(stripped_names[i], scan(tree_data_names[i])[1:11])
#cyl_data <- open_TreeQSM(cylinder_data_names[i])
#cyl_data <- branching_analysis(cyl_data)
#cyl_data$FILENAME <- rep(stripped_names[i], nrow(cyl_data))
#cylinder_data <- rbind(cylinder_data, cyl_data)
}
tree_data
warnings()
source("munge.R")
source("analyse.R")
tree_metadata <- read.csv("data/tree_metadata.csv", stringsAsFactors = FALSE)
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
stripped_names <- sub(pattern=".*cyl_data_ *(.*?) *.pcd.*", "\\1", x=cylinder_data_names)
cylinder_data_names <- paste("data/results/", cylinder_data_names, sep="")
cylinder_data <- open_TreeQSM(cylinder_data_names[1])
cylinder_data$FILENAME <- rep(stripped_names[1], nrow(cylinder_data))
num_trees = length(cylinder_data_names)
tree_data_names <- list.files(path="data/results/", pattern="^tree_data_")
tree_data_names <- paste("data/results/", tree_data_names, sep="")
tree_data <- data.frame(FILENAME=character(num_trees), TREE_VOLUME=numeric(num_trees), TRUNK_VOLUME=numeric(num_trees),
BRANCH_VOLUME=numeric(num_trees), TREE_HEIGHT=numeric(num_trees), TRUNK_LENGTH=numeric(num_trees),
BRANCH_LENGTH=numeric(num_trees), NUM_BRANCHES=integer(num_trees), MAX_BRANCH_ORDER=integer(num_trees),
TREE_AREA=numeric(num_trees), DBH_QSM=numeric(num_trees), DBH_CYL=numeric(num_trees), stringsAsFactors = FALSE)
tree_data[1,] <- c(stripped_names[1], scan(tree_data_names[1])[1:11])
#We might try the entire analysis with different definitions of branch, rather than using
#cylinders which are fine-grained internodes. Ignores biology of bifurcations somewhat (a lot)
#branch_data_names <- list.files(path="data/results/", pattern="^branch_data_")
for(i in seq(2, length(cylinder_data_names)))
{
print(paste("Working on tree:", stripped_names[i]))
tree_data[i,] <- c(stripped_names[i], scan(tree_data_names[i])[1:11])
#cyl_data <- open_TreeQSM(cylinder_data_names[i])
#cyl_data <- branching_analysis(cyl_data)
#cyl_data$FILENAME <- rep(stripped_names[i], nrow(cyl_data))
#cylinder_data <- rbind(cylinder_data, cyl_data)
}
#Interact with metadata for whole-tree parameters
joined_data <- merge(tree_data, tree_metadata, by="FILENAME", all=TRUE)
joined_data
