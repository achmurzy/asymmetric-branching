vv
vv$coefficients[1]
vv$coefficients[[1]]
vv$coefficients
names(vv)
vv$elevation
vv$intercept
vv$coef
vv$coef[[1]]

vv$coef[[1]][1]
vv$coef[[1]][1][1]
vv$coef[[1]]
typeof(vv$coef[[1]])
typeof(vv$coef[[1]][1])
vv$coef[[1]][1]
vv$coef[[1]][1]$elevation
vv$coef[[1]][1]['elevation']
vv$coef[[1]][1,]
vv$coef[[1]][,1]
vv$coef[[1]][1]
vv$coef[[1]][1][1]
vv$coef[[1]][1][0]
vv$coef[[1]][1][1,]
tips <- trees[which(trees$TIPS == 1),]
vv$coef[[1]][1][1,]
vv$coef[[1]][1][2,]
branches <- trees[which(trees$TIPS > 1),]
fitted
elev = vv$coef[[1]][1][1,]
slope = vv$coef[[1]][1][2,]
(branches$V_TOT * slope) + branches$TIPS_VOL
(log(branches$V_TOT) * slope) + log(branches$TIPS_VOL)
slope
vv
(log(branches$V_TOT) * slope) + log(branches$TIPS_VOL)
fitted(vv)
(log(branches$V_TOT) * slope)
(log(branches$V_TOT) * slope) + elev
plot_volume(trees)
plot_volume(trees, normalize=1)
trees$TIPS_VOL
trees$TIPS_VOL / min(trees$TIPS_VOL)
norm_tip_vol = trees$TIPS_VOL / min(trees$TIPS_VOL)
norm_v_tot = trees$V_TOT / min(trees$V_TOT)
norm_v_tot
min(trees$V_TOT)
trees
trees$N_V_TOT <
nrow(trees)
norm_v_tot = trees$V_TOT / min(trees$V_TOT)
norm_v_tot
trees$N_V_TOT = trees$V_TOT / min(trees$V_TOT)
trees$N_TIPS_VOL = trees$TIPS_VOL / min(trees$TIPS_VOL)
sma(formula=N_TIPS_VOL~N_V_TOT, data=trees, log='xy', method='SMA')
slope
vv = sma(formula=N_TIPS_VOL~N_V_TOT, data=trees, log='xy', method='SMA')
fitted(vv)
plot(vv)
plot(vv, which='residual')
plot(vv, which='qq')
plot(vv)
vv = sma(formula=N_V_TOT~N_TIPS_VOL, data=trees, log='xy', method='SMA')
vv
vv = sma(formula=N_TIPS_VOL~N_V_TOT, data=trees, log='xy', method='SMA')
vv
vv = sma(formula=N_TIPS_VOL~N_V_TOT, data=trees, log='xy', method='MA')
vv
vv = sma(formula=N_TIPS_VOL~N_V_TOT, data=trees, log='xy', method='MA')
fitted
fitted(vv)
vv = sma(formula=N_TIPS_VOL~N_V_TOT, data=trees, log='xy', method='SMA')
fitted(vv)
norm_v_tot
norm_v_tot * slope
(norm_v_tot * slope) + elev
(log(norm_v_tot) * slope) + elev
plot(sma)
plot(vv)
dev.new()
plot(vv)
(log(norm_v_tot) * slope) + log(norm_tips_vol)
(log(norm_v_tot) * slope) + log(norm_tip_vol)
(norm_v_tot * slope) + norm_tip_vol
log((norm_v_tot * slope) + norm_tip_vol)
(norm_v_tot * slope) + norm_tip_vol
range((norm_v_tot * slope) + norm_tip_vol)
slope
elev
ggplot(trees, aes(x=log(V_TOT), y=log(TIPS_VOL)) + geom_point(alpha=0.2)
)
ggplot(trees, aes(x=log(V_TOT), y=log(TIPS_VOL))) + geom_point(alpha=0.2)
ggplot(trees, aes(x=log(V_TOT), y=log(TIPS_VOL))) + geom_point(alpha=0.2) + stat_function(fun = function(x) slope*x + elev)
ggplot(trees, aes(x=log(N_V_TOT), y=log(TIPS_VOL/min(trees$TIP_VOL))) + geom_point(alpha=0.2) + stat_function(fun = function(x) slope*x + elev)
)
ggplot(trees, aes(x=log(V_TOT/min(trees$V_TOT)), y=log(TIPS_VOL/min(trees$TIP_VOL)))) + geom_point(alpha=0.2) + stat_function(fun = function(x) slope*x + elev)
colnames(trees)
ggplot(trees, aes(x=log(N_V_TOT), y=log(N_TIPS_VOL))) + geom_point(alpha=0.2) + stat_function(fun = function(x) slope*x + elev)
dev.new()
ggplot(trees, aes(x=log(N_V_TOT), y=log(N_TIPS_VOL))) + geom_point(alpha=0.2) + stat_function(fun = function(x) slope*x + elev)
elev
elev = vv$coef[[1]][1][1,]
elev
slope = vv$coef[[1]][1][2,]
slope
ggplot(trees, aes(x=log(N_V_TOT), y=log(N_TIPS_VOL))) + geom_point(alpha=0.2) + stat_function(fun = function(x) slope*x + elev)
preds = slope*log(N_V_TOT) + elev
preds = slope*log(trees$N_V_TOT) + elev
preds
tree$PREDS = slope*log(trees$N_V_TOT) + elev
trees$PREDS = slope*log(trees$N_V_TOT) + elev
?geom_line
?geom_abline
ggplot(trees, aes(x=log(N_V_TOT), y=log(N_TIPS_VOL))) + geom_point(alpha=0.2) + geom_line(aes(x=log(N_V_TOT), y=PREDS))
dev.new()
ggplot(trees, aes(x=log(N_V_TOT), y=log(N_TIPS_VOL))) + geom_point(alpha=0.2) + geom_line(aes(x=log(N_V_TOT), y=PREDS))
vv
vv$ci
vv$slopetest
range(trees$N_TIP_VOL)
range(trees$N_TIP_VOL, na.rm=TRUE)
trees$N_TIP_VOL
trees
colnames(trees)
range(trees$N_TIPS_VOL, na.rm=TRUE)
range(log(trees$TIPS))
sma(formula=TIPS~V_TOT, data=trees, log='xy', method="SMA")
range(trees$TIPS)
trees$JUNK <- NA
trees$JUNK
vv$coef[[1]][1,]
vv$coef[[1]][1]
vv$coef[[1]][1][1,]
gggm <- list("a", "b", "c")
gggm
gggm[[1]]
gggm[[-1]]
gggm[-1]
gggm[,-1]
gggm[-length(gggm)]
gggm["a"]
gggm[["a"]]
test <- open_TreeQSM("data/results/cyl_data_1_sans_feuilles.pcd_t1_m1_D0.55_DA0.085_DI0.035_L3_F5.txt")
test <- munge_TreeQSM(test)
test_out <- branching_analysis(test)
source('analyse.R')
test_out <- branching_analysis(test)
traceback()
source('analyse.R')
test_out <- branching_analysis(test)
traceback()
test_out <- branching_analysis(test)
source('analyse.R')
test_out <- branching_analysis(test)
source('analyse.R')
test_out <- branching_analysis(test)
source('analyse.R')
test_out <- branching_analysis(test)
source('analyse.R')
test_out <- branching_analysis(test)
source('analyse.R')
test_out <- branching_analysis(test)
test_out$branches
test_out$branches$PREDS
test_out$branches$PRED
test_out$branches$PRED_VOL
test_out$scaling
trees <- which(test_out$branches$TIPS > 1)
trees <- test_out$branches[which(test_out$branches$TIPS > 1),]
ggplot(data=trees, aes(x=log(V_TOT), y=log(TIPS_VOL))) + geom_point(alpha=0.05) +
    geom_line(aes(x=log(V_TOT), y=PRED), color="blue") +
    geom_line(aes(x=log(V_TOT), y=PRED_VOL), color="green") +
    geom_line(aes(x=log(V_TOT), y=PRED_MA), color="red")
dev.new()
ggplot(data=trees, aes(x=log(V_TOT), y=log(TIPS_VOL))) + geom_point(alpha=0.05) +
    geom_line(aes(x=log(V_TOT), y=PRED), color="blue") +
    geom_line(aes(x=log(V_TOT), y=PRED_VOL), color="green") +
    geom_line(aes(x=log(V_TOT), y=PRED_MA), color="red")
ggplot(data=trees, aes(x=log(V_TOT), y=log(TIPS_VOL))) + geom_point(alpha=0.1) +
    geom_line(aes(x=log(V_TOT), y=PRED), color="blue") +
    geom_line(aes(x=log(V_TOT), y=PRED_VOL), color="green") +
    geom_line(aes(x=log(V_TOT), y=PRED_MA), color="red")
source('workflow.R')
traceback()
source('workflow.R')
source('workflow.R')
source('workflow.R')
branches
test_out$scaling
non_tips <- which(test_out$branches$TIPS > 1)
length(which(test_out$branches[non_tips,]$POS))
length(which(test_out$branches[non_tips,]$POS)) / nrow(non_tips)
source('workflow.R')
traceback()
source('workflow.R')
c
ggplot(joined_data) + geom_boxplot(aes(y=ASYM_VOL)) + geom_boxplot(aes(y=SYM_VOL))
dev.new()
ggplot(joined_data) + geom_boxplot(aes(y=ASYM_VOL)) + geom_boxplot(aes(y=SYM_VOL))
ggplot(joined_data) + geom_boxplot(aes(y=ASYM_VOL), color="red") + geom_boxplot(aes(y=SYM_VOL), color="blue")
dev.new()
ggplot(joined_data) + geom_boxplot(aes(y=ASYM_VOL), color="red") + geom_boxplot(aes(y=SYM_VOL), color="blue")
source('plot.R')
faceted_volume_plot(cylinder_data)
?geom_text
?geom_label
?facet_grid
?facet_wrap
joined_data$EMPIRICAL_VOL
slope_factor = factor(joined_data$EMPIRICAL_VOL, levels=sort(joined_data$EMPIRICAL_VOL))
slope_factor
joined_data$SLOPE_FACTOR = slope_factor
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
?geom_text
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
joined_data$SLOPE_FACTOR
?annotate
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
?annotate
?geom_label
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
?geom_text
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
slope_factor
slope_factor
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
?split
scale_factor
scale_factors
slope_factors
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
slope_factors
unique(joined_data$SLOPE_FACTOR)
gvv <- unique(joined_data$SLOPE_FACTOR)[2]
gvv
c() * 10
c(0) * 10
c(rep(0, 10))
as.factor(c(rep(0, 10)))
gg <- as.factor(c(rep(0, 10)))
gg[1] = 10
?as.factor
source('plot.R')
faceted_volume_plot(joined_data, cylinders)
source('plot.R')
faceted_volume_plot(joined_data, cylinders)
faceted_volume_plot(joined_data, cylinder_data)
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
slope_factors
slope_factor
slope_factor[1]
format(slope_factor[1])
?format
format(slope_factor[1], digits=2)
format(slope_factor[1], digits=5)
?format
format(as.numeric(slope_factor[1]), digits=2)
slope_factor[1]
format(as.numeric(slope_factor[1]), digits=3)
format(as.numeric(slope_factor[2]), digits=3)
slope_factor[2]
round(slope_factor[2],2)
round(as.numeric(slope_factor[2]),2)
round(as.numeric(slope_factor[2]),3)
?round
as.numeric(0.80)
as.nmeric(slope_factor.levels[2])
as.numeric(slope_factor.levels[2])
levels(slope_factor[1])
levels(slope_factor[1])[1]
as.numeric(levels(slope_factor[1])[1])
round(as.numeric(levels(slope_factor[1])[1]),2)
levels(slope_factor[1])
slope_factor[1]
as.numeric(levels(slope_factor[1])[slope_factor[1])
as.numeric(levels(slope_factor[1])[slope_factor[1]
)
as.numeric(levels(slope_factor[1]))[slope_factor[1]
)
as.numeric(levels(slope_factor[1]))
as.numeric(levels(slope_factor[1]))[slope_factor[1]]
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
faceted_density_plot(cylinder_data)
father
source('plot.R')
faceted_density_plot(cylinder_data)
source('plot.R')
faceted_asymmetry_plot(cylinder_data)
source('plot.R')
faceted_asymmetry_plot(cylinder_data)
source('plot.R')
faceted_asymmetry_plot(cylinder_data)
?geom_density
?geom_density
range(cylinder_data$D_GAMMA, na.rm=TRUE)
source('plot.R')
faceted_asymmetry_plot(cylinder_data)
source('plot.R')
faceted_volume_scaling_contributions(joined_data)
dev.new()
faceted_volume_scaling_contributions(joined_data)
colnames(joined_data)
ggplot(joined_data, aes(x=NUM_BRANCHES, y = EMPIRICAL_VOL)) + geom_point() + geom_smooth(method='lm')
dev.new()
ggplot(joined_data, aes(x=NUM_BRANCHES, y = EMPIRICAL_VOL)) + geom_point() + geom_smooth(method='lm')
ggplot(joined_data, aes(x=NUM_BRANCHES, y = NETWORK_N)) + geom_point() + geom_smooth(method='lm')
dev.new()
ggplot(joined_data, aes(x=NUM_BRANCHES, y = NETWORK_N)) + geom_point() + geom_smooth(method='lm')
ggplot(joined_data, aes(x=NUM_BRANCHES, y = THETA)) + geom_point() + geom_smooth(method='lm')
dev.new()
ggplot(joined_data, aes(x=NUM_BRANCHES, y = THETA)) + geom_point() + geom_smooth(method='lm')
plot_empirical_asym(joined_data)
dev.off()
plot_empirical_asym(joined_data)
dev.off()
dev.off()
dev.off()
plot_empirical_asym(joined_data)
dev.new()
plot_empirical_asym(joined_data)
plot_empirical_asym(joined_data)
dev.new()
plot_empirical_asym(joined_data)
plot_empirical_asym(joined_data)
gg <- ggplot(data = trees, aes(x = THETA, y = EMPIRICAL)) + geom_point(aes(color=SITE)) +
          geom_errorbar(aes(ymin = CI_MIN, ymax = CI_MAX, color=SITE)) +
    scale_x_continuous(limits=c(0.1, 0.8)) + scale_y_continuous(limits=c(0.1, 0.8)) +
    geom_smooth(method = 'lm', formula=y~x, se=FALSE) +
    stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
                 label.x.npc = "left", label.y.npc = 0.9, formula=y~x, parse = TRUE, size = 5)
gg <- ggplot(data = trees, aes(x = THETA, y = EMPIRICAL_VOL)) + geom_point(aes(color=SITE)) +
          geom_errorbar(aes(ymin = CI_MIN_VOL, ymax = CI_MAX_VOL, color=SITE)) +
    scale_x_continuous(limits=c(0.1, 0.8)) + scale_y_continuous(limits=c(0.1, 0.8)) +
    geom_smooth(method = 'lm', formula=y~x, se=FALSE) +
    stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
                 label.x.npc = "left", label.y.npc = 0.9, formula=y~x, parse = TRUE, size = 5)
print(gg)
gg <- ggplot(data = joined_data, aes(x = THETA, y = EMPIRICAL_VOL)) + geom_point(aes(color=SITE)) +
          geom_errorbar(aes(ymin = CI_MIN_VOL, ymax = CI_MAX_VOL, color=SITE)) +
    scale_x_continuous(limits=c(0.1, 1)) + scale_y_continuous(limits=c(0.1, 1)) +
    geom_smooth(method = 'lm', formula=y~x, se=FALSE) +
    stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
                 label.x.npc = "left", label.y.npc = 0.9, formula=y~x, parse = TRUE, size = 5)
print(gg)
colnames(joined_data)
gg <- ggplot(data = joined_data, aes(x = THETA, y = EMPIRICAL_VOL)) + geom_point(aes(color=SITE)) +
          geom_errorbar(aes(ymin = CI_VOL_MIN, ymax = CI_VOL_MAX, color=SITE)) +
    scale_x_continuous(limits=c(0.1, 1)) + scale_y_continuous(limits=c(0.1, 1)) +
    geom_smooth(method = 'lm', formula=y~x, se=FALSE) +
    stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
                 label.x.npc = "left", label.y.npc = 0.9, formula=y~x, parse = TRUE, size = 5)
print(gg)
dev.new()
print(gg)
width_i <- 2.13
  height_i <- 1.21
  ggsave("asymmetrical_scaling_all_trees.png", plot=gg, device=png(), path="figures", width=width_i, height=height_i, units="in", dpi=600, scale=3.5)
source('plot.R')
faceted_density_plot(cylinder_data)
dev.new()
faceted_density_plot(cylinder_data)
source('plot.R')
faceted_density_plot(cylinder_data)
source('plot.R')
faceted_density_plot(cylinder_data)
nrow(cylinder_data)
length(which(cylinder_data$INVALID))
2*((1/1)^2)*1.1
log(2^5) / ((log(6)*(2^5)) - (5*log(2.2)))
2*((1/1)^2)*0.5
2*((1/1)^2)*0.45
log(2^5) / ((log(6)*(2^5)) - (5*log(0.9)))
plot_asymptotic_formula(joined_data)
source('plot.R')
plot_asymptotic_formula(joined_data)
source('plot.R')
plot_asymptotic_formula(joined_data)
source('plot.R')
plot_asymptotic_formula(joined_data)
source('plot.R')
plot_asymptotic_formula(joined_data)
warnings()
plot_symmetrical_volume_scaling(joined_data)
plot_symmetrical_volume_scaling(joined_data)
dev.new()
plot_symmetrical_volume_scaling(joined_data)
source('plot.R')
plot_symmetrical_volume_scaling(joined_data)
dev.new()
plot_symmetrical_volume_scaling(joined_data)
source('plot.R')
plot_symmetrical_volume_scaling(joined_data)
plot_asymmetrical_volume_scaling(joined_data)
plot_asymmetrical_volume_scaling(joined_data)
source('plot.R')
plot_asymmetrical_volume_scaling(joined_data)
source('plot.R')
plot_asymmetrical_volume_scaling(joined_data)
source('plot.R')
plot_asymmetrical_volume_scaling(joined_data)
source('plot.R')
plot_asymmetrical_volume_scaling(joined_data)
source('plot.R')
plot_asymmetrical_volume_scaling(joined_data)
source('plot.R')
plot_asymmetrical_volume_scaling(joined_data)
source('plot.R')
plot_asymmetrical_volume_scaling(joined_data)
source('plot.R')
plot_asymmetrical_volume_scaling(joined_data)
source('plot.R')
plot_asymmetrical_volume_scaling(joined_data)
source('plot.R')
plot_asymmetrical_volume_scaling(joined_data)
source('plot.R')
plot_asymmetrical_volume_scaling(joined_data)
source('plot.R')
plot_asymmetrical_volume_scaling(joined_data)
source('plot.R')
source('plot.R')
faceted_symmetry_plot(cylinder_data)
faceted_asymmetry_plot(cylinder_data)
dev.new()
faceted_asymmetry_plot(cylinder_data)
source('plot.R')
faceted_asymmetry_plot(cylinder_data)
dev.new()
faceted_asymmetry_plot(cylinder_data)
plot_scaling_comparison(joined_data)
dev.new()
plot_scaling_comparison(joined_data)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.new()
plot_scaling_comparison(joined_data)
plot_scaling_comparison(joined_data)
plot_scaling_comparison(joined_data)
source('plot.R')
plot_scaling_comparison(joined_data)
source('plot.R')
plot_scaling_comparison(joined_data)
dev.new()
plot_scaling_comparison(joined_data)
dev.new()
plot_scaling_comparison(joined_data)
dev.off()
plot_scaling_comparison(joined_data)
dev.new()
dev.new()
plot_scaling_comparison(joined_data)
source('plot.R')
plot_scaling_comparison(joined_data)
source('plot.R')
dev.new()
plot_scaling_comparison(joined_data)
dev.new()
source('plot.R')
plot_scaling_comparison(joined_data)
source('plot.R')
plot_scaling_comparison(joined_data)
source('plot.R')
plot_scaling_comparison(joined_data)
source('plot.R')
plot_scaling_comparison(joined_data)
dev.new()
plot_scaling_comparison(joined_data)
faceted_volume_plot(cylinder_data)
faceted_volume_plot(joined_data, cylinder_data)
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
source('plot.R')
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
dev.new()
faceted_volume_plot(joined_data, cylinder_data)
source('plot.R')
faceted_volume_plot(joined_data, cylinder_data)
plot_asymptotic_formula(joined_data
)
library(rmarkdown)
install.package('rmarkdown')
install.packages('rmarkdown')
?save
save(joined_data, "tree_data.RData")
?save
save(joined_data, file="tree_data.RData")
save(cylinder_data, file="cylinder_data.RData")
quit()
