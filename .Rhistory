test_out <- branching_analysis(test, verbose_report = FALSE)
test$FIB_R
test$FIB_L
test$BETA
test
test_out <- branching_analysis(test, verbose_report = FALSE)
test_out$branches$L_TOT
test_out$branches$FIB_R
test_out$branches$FIB_L
test_out$scaling$fib_l
test_out$scaling$fib_r
tips
#Path fraction (avg L / max L) - L_TOT field broken so fix it
tips <- branches[which(branches$TIPS == 1),]
branches <- test
#Path fraction (avg L / max L) - L_TOT field broken so fix it
tips <- branches[which(branches$TIPS == 1),]
tips
branches
branches <- test_out$branches
#Path fraction (avg L / max L) - L_TOT field broken so fix it
tips <- branches[which(branches$TIPS == 1),]
tips
#Path fraction (avg L / max L) - L_TOT field broken so fix it
tips <- which(branches$TIPS == 1)
tips
branches[-tips,]
branches[1,]$TIPS
length(tips)
branches[tips,]$TIPS
test_out$scaling$fib_l
test_out <- branching_analysis(test, verbose_report = FALSE)
test_out$scaling$fib_l
source("analyse.R")
test_out <- branching_analysis(test, verbose_report = FALSE)
source("analyse.R")
test_out <- branching_analysis(test, verbose_report = FALSE)
test_out$scaling$fib_l
test_out$branches$FIB_L
source("analyse.R")
test_out <- branching_analysis(test, verbose_report = FALSE)
test_out$scaling$fib_l
test_out$scaling$path_frac
test_out$scaling$asym_frac
source("workflow.R")
source("plot.R")
plot_asymmetry_path_frac(joined_data)
render("scaling_report.Rmd")
library(rmarkdown)
render("scaling_report.Rmd")
joined_data$WBE
colnames(joined_data)
colnames(tree_data)
plot_empirical_wbe(joined_data)
range(joined_data$WBE)
source("workflow.R")
source("workflow.R")
render("scaling_report.Rmd")
range(joined_data$WBE)
View(empirical)
rm(list=ls())
source("workflow.R")
source("workflow.R")
render("scaling_report.Rmd")
library(rmarkdown)
render("scaling_report.Rmd")
test <- open_TreeQSM("data/results/cyl_data_Ery_01.pcd_t1_m1_D0.15_DA0.06_DI0.02_L3_F3.txt")
test <- munge_TreeQSM(test)
test_out <- branching_analysis(test)
test_out
range(joined_data$WBE)
joined_data$WBE
joined_data$EMPIRICAL
colnameS(joined_data)
colnames(joined_data)
joined_data[,c("WBE", "SPP")]
source("workflow.R")
render("scaling_report.Rmd")
ggplot(joined_data, aes(x=PATH_FRAC, y=EMPIRICAL, color=SITE)) + geom_point()
ggplot(joined_data, aes(x=FIB_R, y=FIB_L, color=SITE)) + geom_point()
range(joined_data$FIB_L)
mean(joined_data$FIB_L)
mean(joined_data$FIB_R)
ggplot(joined_data, aes(x=NETWORK_N, y=WBE, color=SITE)) + geom_point()
ggplot(joined_data, aes(x=NETWORK_N, y=EMPIRICAL, color=SITE)) + geom_point()
plot_symmetry_all()
plot_symmetry_all(joined_data)
source("plot.R")
plot_symmetry_all(joined_data)
render("scaling_report.Rmd")
render("scaling_report.Rmd")
?render
render("scaling_report.Rmd", output_format = "pdf")
render("scaling_report.Rmd", output_format = "pdf_document")
source("workflow.R")
?sma
?rma
ggplot(joined_data, aes(x=NETWORK_N, y=PATH_FRAC)) + geom_point()
ggplot(joined_data, aes(x=NETWORK_N, y=PATH_FRAC, color=SITE)) + geom_point()
test_out$scaling
source("munge.R")
source("analyse.R")
source("plot.R")
test_out <- branching_analysis(test)
test_out$branches$THETA
branches <- test_out$branches[which(!test_out$branches$INVALID),]
branches$THETA
branches$D_GAMMA
branches$GAMMA
branches$D_BETA
range(test_out$branches$D_BETA)
range(test_out$branches$D_BETA, na.rm=TRUE)
range(test_out$branches$D_GAMMA, na.rm=TRUE)
range(branches$D_GAMMA, na.rm=TRUE)
range(test_out$branches$THETA, na.rm=TRUE)
range(branches$THETA, na.rm=TRUE)
range(branches$BETA, na.rm=TRUE)
range(branches$GAMMA, na.rm=TRUE)
range(branches$D_GAMMA, na.rm=TRUE)
mean(branches$D_BETA, na.rm = TRUE)
mean(branches$D_GAMMA, na.rm = TRUE)
mean(joined_data$D_BETA)
mean(joined_data$D_GAMMA)
source("plot.R")
library(rmarkdown)
render("scaling_report.Rmd")
#For some reason we like going through the first loop iteration manually to initialize everything properly
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
cylinder_data_names
stripped_names <- sub(pattern=".*cyl_data_ *(.*?) *.pcd.*", "\\1", x=cylinder_data_names)
stripped_names
#For some reason we like going through the first loop iteration manually to initialize everything properly
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
stripped_names
stripped_names <- sub(pattern=".*cyl_data_ *(.*?) *.pcd.*", "\\1", x=cylinder_data_names)
stripped_names
test
source('analyse.R')
test_out <- branching_analysis(test)
colnames(test)
source("munge.R")
test <- open_TreeQSM("data/results/cyl_data_Ery_01.pcd_t1_m1_D0.15_DA0.06_DI0.02_L3_F3.txt")
test <- munge_TreeQSM(test)
test_out <- branching_analysis(test)
colnames(test)
range(test$BRANCH_ORDER)
range(test$HACK_ORDER)
range(test$STRAHLER_ORDER)
log(10) / log(2)
log(100) / log(2)
log(4) / log(2)
log(2) / log(2)
source("workflow.R")
source("analyse.R")
source("analyse.R")
source("workflow.R")
tree_data
which(max(tree_data$TREE_VOLUME))
max(tree_data$TREE_VOLUME)
which(max(tree_data$TREE_VOLUME) == tree_data$TREE_VOLUME)
exp
?exp
source("analyse.R")
test_out <- branching_analysis(test)
test <- open_TreeQSM("data/results/cyl_data_Ery_01.pcd_t1_m1_D0.15_DA0.06_DI0.02_L3_F3.txt")
test <- munge_TreeQSM(test)
test_out <- branching_analysis(test)
source("analyse.R")
test_out <- branching_analysis(test)
source("analyse.R")
test_out <- branching_analysis(test)
source("analyse.R")
test_out
test_out$branches$BETA
range(test_out$branches$BETA, na.rm=TRUE)
mean(test_out$branches$BETA, na.rm=TRUE)
gm_mean(test_out$branches$BETA, na.rm=TRUE)
mean(test_out$branches$D_BETA, na.rm=TRUE)
range(test_out$branches$D_BETA, na.rm=TRUE)
test_out$scaling$beta
test_out$scaling$gamma
2*(test_out$scaling$beta^2) * test_out$scaling$gamma
1 - 1.27
abs(0.27)
abs(0.27) > 0.1
1.7^7
test_out$rb
test_out$branches$WBE_THETA
test_out$branches$THETA
nrow(test_out$branches)
length(which(test_out$branches$INVALID))
mean(test_out$branches[which(test_out$branches$INVALID),]$BETA, na.rm=TRUE)
volumetric_scaling = 1.27
N = 4
res = log(2^N) / ((log(N+1)*(2^N)) - N*log(volumetric_scaling))
res
log(1.27)
volumetric_scaling = 3.4
res = log(2^N) / ((log(N+1)*(2^N)) - N*log(volumetric_scaling))
res
test_out$branches$D_GAMMA
test_out$branches$D_BETA
colnames(test_out$branches)
source("plot.R")
plot_branch_ordering(test_out$branches)
plot_branch_ordering(test_out$branches, "V_TOT")
ggplot(test_out$branches, aes(x=D_BETA, y=BETA)) + geom_point()
test_out$scaling
source("analyse.R")
test <- open_TreeQSM("data/results/cyl_data_Ery_01.pcd_t1_m1_D0.15_DA0.06_DI0.02_L3_F3.txt")
test <- munge_TreeQSM(test)
test_out <- branching_analysis(test)
NaN
NaN +1
test_out$branches
test_out$branches$THETA
test_out$branches$WBE_THETA
test_out$scaling
ggplot(test_out$branches, aes(x=N_GEN, y=THETA)) + geom_point()
ggplot(test_out$branches, aes(x=N_GEN, y=WBE_THETA)) + geom_point()
test_out$branches$THETA
mean(test_out$branches$THETA)
mean(test_out$branches$THETA, na.rm=TRUE)
median(test_out$branches$THETA, na.rm=TRUE)
median(test_out$branches$WBE_THETA, na.rm=TRUE)
median(test_out$branches$THETA, na.rm=TRUE)
test_out$branches$BETA
test_out$branches$GAMMA
ls()
rm(list=ls())
gc()
source("workflow.R")
cylinder_data
source("workflow.R")
warnings()
cylinder_data_names
stripped_names
excluded_fits
tree_data_names
excluded fits
excluded_fits
cylinder_data_names
tree_data_names
?scan
cylinder_data_names
excluded
excluded_list
#For some reason we like going through the first loop iteration manually to initialize everything properly
cylinder_data_names <- list.files(path="data/results/", pattern="^cyl_data_")
stripped_names <- sub(pattern=".*cyl_data_ *(.*?) *.pcd.*", "\\1", x=cylinder_data_names)
cylinder_data_names <- paste("data/results/", cylinder_data_names, sep="")
#We are excluding 5 of the 16 potential TreeQSM Tree variables, because these are not always present in the output
tree_data_names <- list.files(path="data/results/", pattern="^tree_data_")
tree_data_names <- paste("data/results/", tree_data_names, sep="")
length(cylinder_data_names)
length(tree_data_names)
source("workflow.R")
smallest = which(min(tree_data$TREE_VOLUME) == tree_data$TREE_VOLUME)
joined_data
joined_data[which(SITE == "WYT" | SITE == "GUY"),]
joined_data[which(joined_data$SITE == "WYT" | joined_data$SITE == "GUY"),]
source("plot.R")
plot_empirical_wbe(joined_data)
plot_empirical_asym(joined_data)
source("plot.R")
plot_empirical_asym(joined_data)
source("plot.R")
plot_empirical_asym(joined_data)
plot_empirical_wbe(joined_data)
plot_empirical_asym(joined_data)
plot_symmetry_all(joined_data)
plot_asymmetry_all(joined_data)
}
plot_asymmetry_proportion(joined_data)
ggplot(cylinder_data, aes(x=THETA, color=POS)) + geom_density()
nrow(cylinder_data)
which(cylinder_data$POS)
length(which(cylinder_data$POS))
ggplot(cylinder_data, aes(x=D_BETA, y=D_GAMMA, color=POS)) + geom_point(alpha=0.1)
valid <- which(~cylinder_data$INVALID)
valid <- which(!cylinder_data$INVALID)
ggplot(cylinder_data[valid,], aes(x=D_BETA, y=D_GAMMA, color=POS)) + geom_point(alpha=0.1)
ggplot(cylinder_data[valid,], aes(x=D_BETA, y=D_GAMMA, color=THETA)) + geom_point(alpha=0.1)
ggplot(cylinder_data[valid,], aes(x=POS, y=THETA) + geom_boxplot()
)
ggplot(cylinder_data[valid,], aes(x=POS, y=THETA)) + geom_boxplot()
ggplot(joined_data, aes(x=WBE, y=THETA, color=SITE)) + geom_point()
gg <- ggplot(joined_data, aes(x=WBE, y=THETA)) + geom_point(aes(color=SITE)) +
geom_smooth(method = 'lm', formula=y~x, se=FALSE) +
stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.x.npc = "left", label.y.npc = 0.7, formula=y~x, parse = TRUE, size = 3)
print(gg)
ggplot(joined_data, aes(x=PATH_FRAC, y=D_GAMMA)) + geom_point()
ggplot(joined_data, aes(x=PATH_FRAC, y=GAMMA)) + geom_point()
ggplot(joined_data, aes(x=PATH_FRAC, y=BETA)) + geom_point()
ggplot(joined_data, aes(x=PATH_FRAC, y=D_BETA)) + geom_point()
ggplot(joined_data, aes(x=PATH_FRAC, y=WBE)) + geom_point()
ggplot(joined_data, aes(x=PATH_FRAC, y=THETA)) + geom_point()
ggplot(joined_data, aes(x=PATH_FRAC, y=D_GAMMA)) + geom_point()
plot_asymmetry_all(joined_data)
source("plot.R")
plot_asymmetry_all(joined_data)
ggplot(joined_data, aes(x=NETWORK_N, y=THETA, color=SITE)) + geom_point()
smallest = which(min(tree_data$TREE_VOLUME) == tree_data$TREE_VOLUME)
smallest
which(min(tree_data$TRUNK_VOLUME, na.rm = TRUE) == tree_data$TREE_VOLUME)
min(tree_data$TRUNK_VOLUME, na.rm = TRUE)
tree_data$TREE_VOLUME
which(min(tree_data$TREE_VOLUME, na.rm = TRUE) == tree_data$TREE_VOLUME)
which(min(joined_data$TREE_VOLUME, na.rm = TRUE) == joined_data$TREE_VOLUME)
joined_data[103,]$TREE_VOLUME
joined_data$TREE_VOLUME
type(joined_data$TREE_VOLUME)
typeof(joined_data$TREE_VOLUME)
tree_data[,3:ncol(tree_data)] <- sapply(tree_data[,3:ncol(tree_data)], as.numeric)
#Join with metadata for whole-tree parameters
#With the all flag, filter trees not present in the metadata, and metadata not present in the trees
joined_data <- merge(tree_data, tree_metadata, by="FILENAME", all=FALSE)
joined_data <- joined_data[which(joined_data$FILENAME != ""),]
which(min(joined_data$TREE_VOLUME, na.rm = TRUE) == joined_data$TREE_VOLUME)
joined_data$TREE_VOLUME
colnames(tree_data)
joined_data$TREE_VOLUME <- as.numeric(joined_data$TREE_VOLUME)
which(min(joined_data$TREE_VOLUME, na.rm = TRUE) == joined_data$TREE_VOLUME)
joined_data[34,]$TREE_VOLUME
smallest = which(min(joined_data$TREE_VOLUME) == joined_data$TREE_VOLUME)
small_tips = exp(joined_data[smallest,]$NETWORK_N * log(2))
largest = which(max(joined_data$TREE_VOLUME) == joined_data$TREE_VOLUME)
correction = 1 - (2^(-1/3) * small_tips^(-1/3) / log(joined_data[largest,]$TREE_VOLUME / joined_data[smallest,]$TREE_VOLUME))
correction
largest
smallest
smallest = which(min(joined_data$TREE_VOLUME, na.rm=TRUE) == joined_data$TREE_VOLUME)
small_tips = exp(joined_data[smallest,]$NETWORK_N * log(2))
largest = which(max(joined_data$TREE_VOLUME, na.rm=TRUE) == joined_data$TREE_VOLUME)
correction = 1 - (2^(-1/3) * small_tips^(-1/3) / log(joined_data[largest,]$TREE_VOLUME / joined_data[smallest,]$TREE_VOLUME))
correction
correction*(3/4)
ggplot(cylinder_data, aes(x=N_GEN, y=RADIUS)) + geom_point(alpha=0.05)
ggplot(cylinder_data, aes(x=log(BRANCH_ORDER), y=log(RADIUS))) + geom_point(alpha=0.05)
range(cylinder_data$BRANCH_ORDER)
log(99)
log(0.5)
log(2.5)
log(12.5)
ggplot(cylinder_data, aes(x=log(BRANCH_ORDER), y=log(VOL))) + geom_point(alpha=0.05)
colnames(cylinder_data)
ggplot(cylinder_data, aes(x=log(BRANCH_ORDER), y=log(VOLUME))) + geom_point(alpha=0.05)
log(0.001)
plot_empirical_wbe(joined_data)
source('plot.R')
plot_empirical_wbe(joined_data)
source('plot.R')
plot_empirical_wbe(joined_data)
plot_empirical_asym(joined_data)
source('plot.R')
plot_empirical_asym(joined_data)
range(joined_data$BETA, na.rm=TRUE)
range(joined_data$GAMMA, na.rm=TRUE)
plot_symmetry_all(joined_data)
source('plot.R')
plot_symmetry_all(joined_data)
plot_symmetry_all(joined_data)
source('plot.R')
plot_symmetry_all(joined_data)
source('plot.R')
plot_symmetry_all(joined_data)
source('plot.R')
plot_symmetry_all(joined_data)
source('plot.R')
plot_symmetry_all(joined_data)
valid
ggplot(cylinder_data[valid,], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=WBE))
ggplot(cylinder_data[valid,], aes(x=BETA, y=GAMMA)) + geom_point(aes(color=WBE_THETA))
ggplot(cylinder_data[valid,], aes(x=BETA, y=GAMMA)) + geom_point(alpha=0.05)
gather(joined_data, key=SCALING, y=EMPIRICAL, WBE, THETA)
?gather
gather(joined_data, key=SCALING, value=EXPONENT, EMPIRICAL, WBE, THETA)
source('plot.R')
plot_scaling_comparison(joined_data)
ggplot(cylinder_data[valid,], aes(x=D_BETA, y=GAMMA)) + geom_point(color=THETA)
ggplot(cylinder_data[valid,], aes(x=D_BETA, y=GAMMA)) + geom_point(aes(color=THETA))
ggplot(cylinder_data[valid,], aes(x=D_BETA, y=GAMMA)) + geom_point(aes(color=THETA), alpha = 0.01)
ggplot(cylinder_data[valid,], aes(x=D_BETA, y=GAMMA)) + geom_point(aes(color=THETA), alpha = 0.05)
which(cylinder_data$D_BETA == 0)
ggplot(cylinder_data[valid,], aes(x=D_BETA, y=GAMMA)) + geom_point(aes(color=THETA), alpha = 0.1)
ggplot(cylinder_data[valid,], aes(x=D_BETA, y=D_GAMMA)) + geom_point(aes(color=THETA), alpha = 0.1)
ggplot(cylinder_data[valid,], aes(x=D_BETA) + geom_density()
)
ggplot(cylinder_data[valid,], aes(x=D_BETA)) + geom_density()
ggplot(cylinder_data[valid,], aes(x=D_GAMMA)) + geom_density()
ggplot(cylinder_data[valid,], aes(x=D_BETA)) + geom_density()
ggplot(joined_data, aes(x=EMPIRICAL, y=NODE_WBE)) + geom_point()
plot.R
source("plot.R")
plot_empirical_node_wbe(joined_data)
source("plot.R")
asym(joined_data)
plot_empirical_node_asym(joined_data)
colnames(joined_data)
source("plot.R")
plot_empirical_node_asym(joined_data)
length(cylinder_data[valid,])
valid
length(valid)
nrow(cylinder_data)
length(which(cylinder_data[valid,]$pos))
length(which(cylinder_data[valid,]$POS))\
length(which(cylinder_data[valid,]$POS))
neg_val <- which(cylinder_data[valid,]$POS)
sym_neg_val <- 2*(cylinder_data[neg_val,]$BETA^2)*cylinder_data[neg_val,]$GAMMA
ggplot(sym_neg_val) + geom_density()
qplot
qplot(sym_neg_val, geom="density")
ggplot(cylinder_data[valid,], aes(x=BETA, y=GAMMA)) + geom_point()
which(cylinder_data[valid,]$BETA == NA)
which(is.na(cylinder_data[valid,]$BETA))
which(is.na(cylinder_data[neg_val,]$BETA))
range(sym_neg_val)
range(sym_neg_val, na.rm =TRUE)
which(sym_neg_val == 92.901620323)
max(sym_neg_val)
max(sym_neg_val, na.rm = TRUE)
which(sym_neg_val == max(sym_neg_val, na.rm = TRUE))
cylinder_data[11206,]
range(cylinder_data[neg_val,]$BETA, na.rm=TRUE)
length(valid)
valid <- which(cylinder_data$INVALID)
length(valid)
valid <- which(!cylinder_data$INVALID)
length(valid)
cylinder_data[valid,]$INVALID
which(cylinder_data[valid,]$BETA > 1)
neg_val <- which(!cylinder_data[valid,]$POS)
length(neg_val)
pos_val <- which(!cylinder_data[valid,]$POS)
length(pos_val)
pos_val <- which(cylinder_data[valid,]$POS)
length(pos_val)
range(cylinder_data[pos_val,]$D_BETA. na.rm=TRUE)
range(cylinder_data[pos_val,]$D_BETA. na.rm = TRUE)
range(cylinder_data[pos_val,]$D_BETA, na.rm=TRUE)
range(cylinder_data[neg_val,]$D_BETA, na.rm=TRUE)
range(cylinder_data[pos_val,]$D_GAMMA, na.rm=TRUE)
range(cylinder_data[neg_val,]$D_GAMMA, na.rm=TRUE)
sym_neg_vol <- 2*(cylinder_data[neg_val,]$BETA^2)*cylinder_data[neg_val,]$GAMMA
qplot(sym_neg_val, geom="density")
range(cylinder_data[neg_val,]$BETA)
range(cylinder_data[neg_val,]$BETA, na.rm=TRUE)
which(cylinder_data[neg_val,]$BETA > 1)
val_inval <- which(cylinder_data[neg_val,]$BETA > 1)
cylinder_data[val_inval,]
which(cylinder_data[val_inval,]$INVALID)
which(cylinder_data[valid,]$INVALID)
valid_cylinders <- cylinder_data[valid,]
which(valid_cylinders$POS)
pos_val <- which(valid_cylinders$POS)
neg_val <- which(!valid_cylinders$POS)
sym_neg_vol <- 2*(valid_cylinders[neg_val,]$BETA^2)*valid_cylinders[neg_val,]$GAMMA
sym_pos_vol <- 2*(valid_cylinders[pos_val,]$BETA^2)*valid_cylinders[pos_val,]$GAMMA
qplot(sym_neg_vol, geom="density")
qplot(sym_pos_vol, geom="density")
range(valid_cylinders[neg_val,]$D_BETA, na.rm=TRUE)
range(valid_cylinders[neg_val,]$D_GAMMA, na.rm=TRUE)
range(valid_cylinders[pos_val,]$D_BETA, na.rm=TRUE)
range(valid_cylinders[pos_val,]$D_GAMMA, na.rm=TRUE)
asym_neg_vol <- (2*(valid_cylinders[neg_val,]$BETA^2)*valid_cylinders[neg_val,]$GAMMA) + (4*valid_cylinders[neg_val,]$BETA*valid_cylinders[neg_val,]$D_BETA*valid_cylinders[neg_val,]$D_GAMMA) + (2*valid_cylinders[neg_val,]$GAMMA*valid_cylinders[neg_val,]$D_BETA)
qplot(asym_neg_vol, geom="density")
asym_pos_vol <- (2*(valid_cylinders[pos_val,]$BETA^2)*valid_cylinders[pos_val,]$GAMMA) + (4*valid_cylinders[pos_val,]$BETA*valid_cylinders[pos_val,]$D_BETA*valid_cylinders[pos_val,]$D_GAMMA) + (2*valid_cylinders[pos_val,]$GAMMA*valid_cylinders[pos_val,]$D_BETA)
qplot(asym_pos_vol, geom="density")
qplot(asym_neg_vol, geom="density")
mean(asym_neg_vol)
length(asym_neg_vol)
length(which(asym_neg_vol < 0))
mean(asym_pos_vol)
length(asym_pos_vol)
ggplot(valid_cylinders, aes(x=D_BETA, y=D_GAMMA)) + geom_point(aes(color=THETA)) + scale_colour_gradient(low="purple", high="yellow")
ggplot(valid_cylinders, aes(x=D_BETA, y=D_GAMMA)) + geom_point(aes(color=THETA), alpha=0.1) + scale_colour_gradient(low="purple", high="yellow")
ggplot(valid_cylinders, aes(x=D_BETA, y=D_GAMMA)) + geom_point(aes(color=THETA), alpha=0.25) + scale_colour_gradient(low="purple", high="yellow")
ggplot(valid_cylinders, aes(x=D_BETA, y=D_GAMMA)) + geom_point(aes(color=POS))
ggplot(valid_cylinders, aes(x=D_BETA, y=D_GAMMA)) + geom_point(aes(color=THETA), alpha=0.25) + scale_colour_gradient(low="purple", high="yellow")
mean(valid_cylinders[neg_val,]$THETA)
mean(valid_cylinders[neg_val,]$THETA, na.rm=TRUE)
mean(valid_cylinders[pos_val,]$THETA, na.rm=TRUE)
ggplot(valid_cylinders, aes(x=D_BETA, y=D_GAMMA)) + geom_point(aes(color=POS))
ggplot(valid_cylinders, aes(x=D_BETA, y=D_GAMMA)) + geom_point(aes(color=POS), alpha=0.1)
ls()
qplot(sym_neg_vol, geom="density")
qplot(asym_neg_vol, geom="density")
plot_asymmetry_proportion(joined_data)
gg <- ggplot(joined_data, aes(x=NETWORK_N, y=EMPIRICAL, color=SITE)) + geom_point()
print(gg)
colnames(joined_data)
ggplot(joined_data, aes(x=GAMMA, PATH_FRAC, color=SITE)) + geom_point()
ggplot(joined_data, aes(x=D_GAMMA, PATH_FRAC, color=SITE)) + geom_point()
ggplot(joined_data, aes(x=D_BETA, PATH_FRAC, color=SITE)) + geom_point()
mean(valid_cylinders[neg_val,]$WBE_THETA - valid_cylinders[neg_val,]$THETA, na.rm=TRUE)
min(valid_cylinders[neg_val,]$WBE_THETA - valid_cylinders[neg_val,]$THETA, na.rm=TRUE)
max(valid_cylinders[neg_val,]$WBE_THETA - valid_cylinders[neg_val,]$THETA, na.rm=TRUE)
mean(valid_cylinders[pos_val,]$WBE_THETA - valid_cylinders[pos_val,]$THETA, na.rm=TRUE)
max(valid_cylinders$WBE_THETA)
max(valid_cylinders$WBE_THETA, na.rm=TRUE)
min(valid_cylinders$WBE_THETA, na.rm=TRUE)
min(valid_cylinders$THETA, na.rm=TRUE)
max(valid_cylinders$THETA, na.rm=TRUE)
nrow(joined_data)
joined_data$FILENAME
ggplot(joined_data, aes(x=ASYM_FRAC)) + geom_densitY()
ggplot(joined_data, aes(x=ASYM_FRAC)) + geom_density()
source('plot.R')
plot_empirical_asym(joined_data)
plot_empirical_wbe(joined_data)
